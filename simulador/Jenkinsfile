pipeline {
  agent any
  tools {
    jdk 'JDK17'
    maven 'Maven3'
    dockerTool 'Docker'
  }
  environment {
    IMAGE_NAME = "transchile-simulador:latest"
  }
  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Lint (simulado)') {
      steps {
        echo 'Revisando estilo de código (simulado con mvn fmt:check)...'
        sh 'echo "Lint OK"'
      }
    }

    stage('Compilar y testear') {
      steps {
        sh 'mvn clean verify'
      }
    }

    stage('Coverage') {
      steps {
        echo 'Generando reporte de cobertura JaCoCo...'
        sh 'mvn jacoco:report'
      }
      post {
        always {
          publishHTML(target: [
            reportName: 'Coverage',
            reportDir: 'target/site/jacoco',
            reportFiles: 'index.html'
          ])
        }
      }
    }

    stage('Analizar con SonarQube') {
      steps {
        withSonarQubeEnv('SonarQube') {
          sh 'mvn sonar:sonar'
        }
      }
    }

    stage('Escaneo de seguridad') {
      parallel {
        stage('Trivy') {
          steps {
            sh "docker build -t ${IMAGE_NAME} ."
            sh "trivy image ${IMAGE_NAME} || true"  // Permite continuar aún si hay findings
          }
        }
        stage('OWASP ZAP (simulado)') {
          steps {
            echo 'Escaneando con OWASP ZAP (simulado)...'
            sh 'echo "ZAP OK"'
          }
        }
      }
    }

    stage('Build JAR y Docker') {
      steps {
        sh 'mvn package -DskipTests'
        sh "docker build -t ${IMAGE_NAME} ."
        archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
      }
    }

    stage('Despliegue a Staging') {
      steps {
        echo "Desplegando a entorno Staging (simulado)..."
      }
    }

    stage('Despliegue a Producción') {
      when {
        branch 'main'
      }
      steps {
        echo "Desplegando a Producción (simulado)..."
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
